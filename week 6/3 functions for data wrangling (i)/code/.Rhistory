knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
nrow(data_demographics_raw)
nrow(data_selfreport_raw)
nrow(data_amp_raw)
View(data_amp_raw)
View(data_demographics_raw)
View(data_selfreport_raw)
# use a function without the pipe
example_without_pipe <- clean_names(data_demographics_raw)
View(example_without_pipe)
View(data_demographics_raw)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
library(knitr)
library(kableExtra)
# demographics data
data_demographics_raw <- read_csv(file = "../data/raw/data_demographics_raw.csv")
# self report measure data
data_selfreport_raw <- read_csv(file = "../data/raw/data_selfreport_raw.csv")
# affect attribution procedure data
data_amp_raw <- read_csv(file = "../data/raw/data_amp_raw.csv")
# use a series of functions without the pipe
example2_without_pipe <- summarise(group_by(mutate(rename(clean_names(dat = data_amp_raw), unique_id = subject, block = blockcode, trial_type = trialcode, rt = latency), fast_trial = ifelse(rt < 100, 1, 0)), unique_id), percent_fast_trials = mean(fast_trial)*100)
# use a series of functions with the pipe
example2_with_pipe <- data_amp_raw %>%
# clean the column names
clean_names() %>%
# rename the columns
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode,
rt = latency) %>%
# create a new variable using existing ones
mutate(fast_trial = ifelse(rt < 100, 1, 0)) %>%
# summarize across trials for each participant
group_by(unique_id) %>%
summarise(percent_fast_trials = mean(fast_trial)*100)
# check they produce identical results
identical(example2_without_pipe, example2_with_pipe)
?clean_names
data_demographics_clean_names <- clean_names(data_demographics_raw)
data_selfreport_clean_names <- clean_names(data_selfreport_raw)
data_amp_clean_names <- clean_names(data_amp_raw)
# print all column names
colnames(data_demographics_clean_names)
# print all column names as a vector
dput(colnames(data_demographics_clean_names))
# print all column names as a vector using the pipe
data_demographics_clean_names %>%
colnames() %>%
dput()
#data_selfreport_clean_names
data_selfreport_clean_names %>%
colnames() %>%
dput()
#data_amp_clean_names
data_amp_clean_names %>%
colnames() %>%
dput()
data_demographics_renamed <- data_demographics_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_selfreport_renamed <- data_selfreport_clean_names %>%
rename(unique_id = subject,
item = trialcode)
data_amp_renamed <- data_amp_clean_names %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode)
data_demographics_selected_columns <- data_demographics_renamed %>%
select(unique_id, item, response)
data_selfreport_selected_columns <- data_selfreport_renamed %>%
select(unique_id, item, response)
data_amp_selected_columns <- data_amp_renamed %>%
select(unique_id, block, trial_type, correct, latency)
# remove all objects in environment
rm(list = ls())
data_demographics_trimmed <- read_csv("../data/raw/data_demographics_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_selfreport_trimmed <- read_csv("../data/raw/data_selfreport_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
item = trialcode) %>%
select(unique_id, item, response)
data_amp_trimmed <- read_csv("../data/raw/data_amp_raw.csv") %>%
clean_names() %>%
rename(unique_id = subject,
block = blockcode,
trial_type = trialcode) %>%
select(unique_id, block, trial_type, correct, latency)
View(data_amp_trimmed)
View(data_demographics_trimmed)
data_demographics_trimmed %>%
count(item)
data_demographics_trimmed %>%
count(response)
data_selfreport_trimmed %>%
count(item)
data_selfreport_trimmed %>%
count(response)
data_amp_trimmed %>%
count(block)
data_amp_trimmed %>%
count(trial_type)
data_amp_trimmed %>%
count(correct)
data_amp_trimmed %>%
count(latency)
View(data_amp_trimmed)
data_demographics_trimmed %>%
count(item, response)
data_demographics_trimmed %>%
count(item, response) %>%
arrange(desc(n)) # arrange in descending order
# example using equivalence
example_equivalence <- data_amp_trimmed %>%
filter(block == "test")
# example using negation
example_negation <- data_selfreport_trimmed %>%
filter(item != "instructions")
# example using membership
example_membership <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
View(data_amp_trimmed)
View(data_selfreport_trimmed)
data_selfreport_without_instruction <- data_selfreport_trimmed %>%
filter(item != instructions)
data_selfreport_without_instruction <- data_selfreport_trimmed %>%
filter(item != "instructions")
View(data_selfreport_without_instruction)
data_selfreport_without_instruction <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
View(data_selfreport_without_instruction)
rm(data_selfreport_without_instruction)
data_selfreport_trials <- data_selfreport_trimmed %>%
filter(item %in% c("positive", "prefer", "like"))
View(data_amp_trimmed)
data_amp_trimmed  %>% count(block)
data_amp_trimmed  %>% count(trial_type)
data_amp_testtrials <- data_amp_trimmed %>%
filter(block == "test" & trial_type != "instructions")
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
data_amp_test_trials <- data_amp_trimmed %>%
filter(block == "test" & trial_type != "instructions")
# mutating new variables
example_1 <- data_amp_test_trials %>%
mutate(latency_plus_1 = latency + 1)
example_2 <- data_amp_test_trials %>%
mutate(log_latency = log(latency))
View(example_1)
View(example_2)
# illustrate the problem with the gender responses:
data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
count(response) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# clean up the gender variable
data_demographics_gender_tidy_1 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender)) %>%
mutate(gender = str_remove_all(gender, "[\\d.]")) %>% # remove everything except letters
mutate(gender = na_if(gender, "")) %>%
mutate(gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# illustrate the data after cleaning:
data_demographics_gender_tidy_1 %>%
count(gender) %>%
arrange(desc(n))
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# clean up the gender variable
data_demographics_gender_tidy_2 <- data_demographics_trimmed %>%
# filter only the gender item, not age
filter(item == "gender") %>%
# change the name of the response variable to what it now represents: gender
rename(gender = response) %>%
# change or remove weird responses to the gender question
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"), # remove everything except letters
gender = na_if(gender, ""),
gender = case_when(gender == "woman" ~ "female",
gender == "man" ~ "male",
gender == "girl" ~ "female",
gender == "yes" ~ NA_character_,
gender == "dude" ~ "male",
gender == "non binary" ~ "non-binary",
TRUE ~ gender)) %>%
# select only the columns of interest
select(unique_id, gender)
# check they are identical
identical(data_demographics_gender_tidy_1, data_demographics_gender_tidy_2)
?ifelse
View(data_amp_test_trials)
data_fast_trial <- data_amp_test_trials %>%
mutate(fast_trial = ifelse(latency < 100, NA, latency))
data_amp_test_trials_with_fast_trials <- data_amp_test_trials %>%
mutate(fast_trial = latency < 100)
identical(data_fast_trial, data_amp_test_trials_with_fast_trials)
View(data_amp_test_trials_with_fast_trials)
View(data_fast_trial)
data_fast_trial %>% count(latency)
data_fast_trial %>% count(fast_trial)
View(data_demographics_trimmed)
data_demographics_trimmed %>%
select(item == "age") %>%
count(response)
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
data_demographics_trimmed %>%
select(item == "age") %>%
count(response)
# what values are present?
data_demographics_trimmed %>%
filter(item == "age") %>%
count(response)
dat_age_tidied <- data_demographics_trimmed %>%
filter(item == "age") %>%
rename(age = item) %>%
mutate(age = ifelse(age == "old", NA, age),
age = as.numeric(age)) %>%
select(unique_id, age)
data_demographics_age_tidy <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response) # note that you can rename inside a select call
identical(dat_age_tidied, data_demographics_age_tidy)
View(dat_age_tidied)
View(data_demographics_age_tidy)
dat_age_tidied <- data_demographics_trimmed %>%
filter(item == "age") %>%
rename(age = item) %>%
mutate(age = ifelse(age == "old", NA, age),
age = as.numeric(age))
View(dat_age_tidied)
dat_age_tidied <- data_demographics_trimmed %>%
filter(item == "age") %>%
rename(age = item) %>%
mutate(age = ifelse(age == "old", NA, age),
age = as.numeric(age)) %>%
select(unique_id, age = response)
dat_age_tidied <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(age)) %>%
select(unique_id, age = response)
dat_age_tidied <- data_demographics_trimmed %>%
filter(item == "age") %>%
mutate(response = ifelse(response == "old", NA, response),
response = as.numeric(response)) %>%
select(unique_id, age = response)
View(dat_age_tidied)
identical(dat_age_tidied, data_demographics_age_tidy)
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age)
# check this has fixed the issue
data_demographics_age_tidy %>%
count(age) %>%
arrange(desc(n))
# what values are present?
data_selfreport_trials %>%
count(response)
# what type of data is the response column?
class(data_selfreport_trials$response)
View(data_selfreport_trials)
# remove non Likert values
data_selfreport_tidied <- data_selfreport_trials %>%
mutate(response = ifelse(response %in% c("1","2","3","4","5","6","7"),response, NA),
response = as.numeric(response))
# show the data after changes
data_selfreport_tidy %>%
count(response)
data_selfreport_tidy <- data_selfreport_trials %>%
mutate(response = ifelse(response %in% c("1", "2", "3", "4", "5", "6", "7"), response, NA),
response = as.numeric(response))
# show the data after changes
data_selfreport_tidy %>%
count(response)
class(data_selfreport_tidy$response)
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_positive" ~ correct,
trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0))
# you can also specify a default value to return if none of the logical tests are passed with 'TRUE ~':
data_amp_tidy <- data_amp_test_trials_with_fast_trials %>%
mutate(correct = case_when(trial_type == "prime_negative" & correct == 0 ~ 1,
trial_type == "prime_negative" & correct == 1 ~ 0,
TRUE ~ correct))
View(data_amp_tidy)
round(0.5)
round(1.5)
round(2.5)
round(3.5)
round(4.5)
round(5.5)
round_half_up(0.5)
round_half_up(5.5)
# mean
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE))
View(data_demographics_age_tidy)
# SD
data_demographics_age_tidy %>%
summarize(sd_age = sd(age, na.rm = TRUE))
# mean and SD with rounding, illustrating how multiple summarizes can be done in one function call
data_demographics_age_tidy %>%
summarize(mean_age = mean(age, na.rm = TRUE),
mean_age = round_half_up(mean_age, digits = 2),
sd_age = sd(age, na.rm = TRUE),
sd_age = round_half_up(sd_age, digits = 2))
