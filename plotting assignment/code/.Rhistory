title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotates x-axis labels for readability
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_density_ridges2(alpha = 0.7, scale = 1.2) +
scale_fill_manual(values = c("Control" = "gray", "SUS" = "red", "CBT" = "blue")) +
labs(
title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate labels for readability
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_boxplot(width = 0.2, alpha = 0.5, position = position_dodge(width = 0.6)) +  # Boxplots for medians
geom_point(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6), alpha = 0.4) +  # Jittered raw data
geom_violin(alpha = 0.3, position = position_dodge(width = 0.6)) +  # Density curve (violin)
scale_fill_manual(values = c("Control" = "gray", "SUS" = "red", "CBT" = "blue")) +
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_density(stat = "identity", alpha = 0.5) +  # Creates a "ridgeline" effect
scale_fill_manual(values = c("Control" = "gray", "SUS" = "red", "CBT" = "blue")) +
labs(title = "BDI Score Density Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_boxplot(width = 0.2, alpha = 0.5, position = position_dodge(width = 0.6)) +  # Boxplots for medians
geom_point(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6), alpha = 0.4) +  # Jittered raw data
geom_violin(alpha = 0.3, position = position_dodge(width = 0.6)) +  # Density curve (violin)
scale_fill_manual(values = c("Control" = "gray", "SUS" = "red", "CBT" = "blue")) +
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.3, position = position_dodge(width = 0.6), trim = TRUE) +  # Smoothed density without tails
geom_point(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6),
alpha = 0.3, size = 1.5) +  # Lighter, smaller dots to reduce clutter
scale_fill_manual(values = c("Control" = "gray70", "SUS" = "red", "CBT" = "blue")) +  # Softer colors
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(long_depression_data, aes(x = BDI_score, y = factor(time), fill = group)) +
geom_density_ridges(alpha = 0.7) +
labs(title = "BDI Score Distributions Across Time", x = "BDI Score", y = "Time") +
theme_minimal()
ggplot(long_depression_data, aes(x = BDI_score, y = factor(time), fill = group)) +
geom_density_ridges(alpha = 0.7) +
scale_x_reverse() +  # Reverses the x-axis direction
labs(title = "BDI Score Distributions Across Time",
x = "BDI Score (Lower = Better Health)",
y = "Time") +
theme_minimal()
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.3, position = position_dodge(width = 0.6), trim = TRUE) +  # Smoothed density without tails
geom_point(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6),
alpha = 0.3, size = 1.5) +  # Lighter, smaller dots to reduce clutter
scale_fill_manual(values = c("Control" = "gray70", "SUS" = "red", "CBT" = "blue")) +  # Softer colors
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.5, position = position_dodge(width = 0.6), trim = TRUE, width = 0.9) +  # Clean violin shape
scale_fill_manual(values = c("Control" = "#b0b0b0", "SUS" = "#E07B91", "CBT" = "#4A90E2")) +  # Softer, modern colors
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_light() +  # Light theme for a fresh look
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.6, position = position_dodge(width = 0.6), trim = TRUE, width = 0.85) +
scale_fill_manual(values = c("Control" = "#1E1E1E", "SUS" = "#D72638", "CBT" = "#3B82F6")) +
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_dark() +  # Darker background for contrast
theme(axis.text.x = element_text(angle = 45, hjust = 1, color = "white"),
axis.text.y = element_text(color = "white"),
plot.title = element_text(color = "white"),
legend.text = element_text(color = "white"))
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, color = group)) +
geom_violin(alpha = 0, position = position_dodge(width = 0.6), trim = TRUE, width = 0.8, size = 1.2) +
scale_color_manual(values = c("Control" = "black", "SUS" = "red", "CBT" = "blue")) +
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
color = "Group") +
theme_classic()
ggplot(long_depression_data, aes(x = as.numeric(session_number), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.5, position = position_dodge(width = 0.6), trim = TRUE, width = 0.9) +
scale_x_continuous(breaks = seq(1, max(long_depression_data$session_number, na.rm = TRUE), by = 4),
labels = c("1", "4", "7", "10", "13", "16", "19", "21", "6M Follow-Up")) +
scale_fill_manual(values = c("Control" = "#b0b0b0", "SUS" = "#E07B91", "CBT" = "#4A90E2")) +
labs(title = "BDI Score Over Time (Continuous Scale)",
x = "Session Number",
y = "BDI Score",
fill = "Group") +
theme_minimal()
ggplot(long_depression_data, aes(x = as.numeric(session_number), y = BDI_score, color = group)) +
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smooth curve without confidence shading
scale_x_continuous(breaks = seq(1, max(long_depression_data$session_number, na.rm = TRUE), by = 4),
labels = c("1", "4", "7", "10", "13", "16", "19", "21", "6M Follow-Up")) +
scale_color_manual(values = c("Control" = "black", "SUS" = "red", "CBT" = "blue")) +
labs(title = "BDI Score Trends Over Time",
x = "Session Number",
y = "BDI Score",
color = "Group") +
theme_light()
ggplot(long_depression_data, aes(x = as.numeric(session_number), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.5, position = position_dodge(width = 0.6), trim = TRUE, width = 0.9) +
scale_x_continuous(
breaks = seq(1, max(long_depression_data$session_number, na.rm = TRUE), by = 4),
labels = c("1", "4", "7", "10", "13", "16", "19", "21", "Follow-Up")[1:length(seq(1, max(long_depression_data$session_number, na.rm = TRUE), by = 4))]
) +
scale_fill_manual(values = c("Control" = "#b0b0b0", "SUS" = "#E07B91", "CBT" = "#4A90E2")) +
labs(title = "BDI Score Over Time (Continuous Scale)",
x = "Session Number",
y = "BDI Score",
fill = "Group") +
theme_minimal()
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.5, trim = TRUE, width = 0.9) +
facet_wrap(~group, nrow = 1) +  # Separate panels for each group
scale_fill_manual(values = c("Control" = "#b0b0b0", "SUS" = "#E07B91", "CBT" = "#4A90E2")) +
labs(title = "BDI Score Distributions Over Time (Separated by Group)",
x = "Time",
y = "BDI Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(long_depression_data, aes(x = factor(time), y = BDI_score, fill = group)) +
geom_violin(alpha = 0.3, position = position_dodge(width = 0.6), trim = TRUE) +  # Smoothed density without tails
geom_point(position = position_jitterdodge(jitter.width = 0.2, dodge.width = 0.6),
alpha = 0.3, size = 1.5) +  # Lighter, smaller dots to reduce clutter
scale_fill_manual(values = c("Control" = "gray70", "SUS" = "red", "CBT" = "blue")) +  # Softer colors
labs(title = "BDI Score Distributions Over Time",
x = "Time",
y = "BDI Score",
fill = "Group") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for clarity
ggplot(moral_cumulative, aes(x = factor(moral_allocation), y = cumulative_count, fill = ideology)) +
geom_bar(stat = "identity", position = "identity", alpha = 0.5) +
scale_fill_manual(values = c("Conservative" = "red", "Liberal" = "blue")) +
theme_minimal() +
labs(title = "Moral Inclusion Expanding by Ideology",
x = "Moral Allocation Level (Includes All Prior Levels)",
y = "Cumulative Number of Participants")
ggplot(moral_cumulative, aes(x = factor(moral_allocation), y = cumulative_count, fill = ideology)) +
geom_bar(stat = "identity", position = "identity", alpha = 0.5) +
scale_fill_manual(values = c("Conservative" = "red", "Liberal" = "blue")) +
theme_minimal() +
labs(title = "Moral Inclusion Expanding by Ideology",
x = "Moral Allocation Level (Includes All Prior Levels)",
y = "Cumulative Number of Participants")
ggplot(moral_cumulative, aes(x = moral_allocation, y = proportion, color = ideology, group = ideology)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
scale_color_manual(values = c("Conservative" = "red", "Liberal" = "blue")) +
theme_minimal() +
labs(title = "Cumulative Moral Inclusion by Ideology",
x = "Moral Allocation Level (Each Level Includes All Before It)",
y = "Proportion of Participants")
set.seed(42)
n <- 500
moral_data <- tibble(
id = 1:n,
ideology = sample(c("Conservative", "Liberal"), n, replace = TRUE, prob = c(0.5, 0.5)),
highest_allocation = ifelse(
ideology == "Conservative",
sample(1:7, n, replace = TRUE, prob = c(0.1, 0.15, 0.25, 0.3, 0.15, 0.05, 0.02)),
sample(1:15, n, replace = TRUE, prob = c(0.02, 0.03, 0.05, 0.07, 0.08, 0.1, 0.1, 0.08, 0.07, 0.07, 0.08, 0.1, 0.06, 0.05, 0.04))
)
)
# Create cumulative inclusion
moral_cumulative <- moral_data %>%
group_by(ideology, highest_allocation) %>%
summarize(count = n(), .groups = "drop") %>%
complete(ideology, highest_allocation = 1:15, fill = list(count = 0)) %>%
arrange(ideology, highest_allocation) %>%
group_by(ideology) %>%
mutate(cumulative_count = cumsum(count),
percent_included = cumulative_count / max(cumulative_count))
# Plot
ggplot(moral_cumulative, aes(x = highest_allocation, y = percent_included, fill = ideology)) +
geom_area(alpha = 0.6, position = "identity") +
scale_fill_manual(values = c("Conservative" = "#E74C3C", "Liberal" = "#3498DB")) +
labs(title = "Cumulative Moral Inclusion by Ideology",
x = "Moral Inclusion Level",
y = "Proportion of Group Including This Level or Below",
fill = "Ideology") +
theme_minimal()
# Simulate Data
ggplot(moral_cumulative, aes(x = highest_allocation, y = percent_included, color = ideology)) +
geom_line(size = 1.2) +
geom_point(size = 2) +
scale_color_manual(values = c("Conservative" = "#E74C3C", "Liberal" = "#3498DB")) +
labs(title = "Cumulative Moral Inclusion Curves",
x = "Moral Inclusion Level",
y = "Proportion of Group Including This Level or Below",
color = "Ideology") +
theme_minimal()
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = percent_included)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Cumulative Moral Inclusion Heatmap",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Including This Level or Below") +
theme_minimal()
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = cumulative_count, fill = ideology)) +
geom_col(position = "dodge", alpha = 0.7) +
scale_fill_manual(values = c("Conservative" = "#E74C3C", "Liberal" = "#3498DB")) +
labs(title = "Moral Inclusion Across Ideologies",
x = "Moral Inclusion Level",
y = "Number of Participants Including This Level or Beyond",
fill = "Ideology") +
theme_minimal()
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_count)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Moral Inclusion Heatmap (Fading Over Time)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Number of Participants Including") +
theme_minimal()
ggplot(moral_cumulative, aes(x = highest_allocation, y = cumulative_count, color = ideology)) +
geom_line(size = 1.5) +
geom_point(size = 2) +
scale_color_manual(values = c("Conservative" = "#E74C3C", "Liberal" = "#3498DB")) +
labs(title = "Moral Inclusion Over Levels",
x = "Moral Inclusion Level",
y = "Number of Participants Still Including",
color = "Ideology") +
theme_minimal()
moral_cumulative <- moral_data %>%
arrange(ideology, highest_allocation) %>%
group_by(ideology, highest_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(cumulative_count = rev(cumsum(rev(count)))) %>%  # Reverse cumulative sum
group_by(ideology) %>%
mutate(cumulative_prop = cumulative_count / max(cumulative_count))  # Normalize to 1 (100%)
# Now plot with properly calculated fading
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Moral Inclusion Heatmap (Fading Over Time)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", trans = "sqrt") +  # Smoother fading
labs(title = "Moral Inclusion Heatmap (More Gradual Fading)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
# Set seed for reproducibility
set.seed(42)
# Define moral allocation choices
moral_choices <- 1:16
# Generate data for conservatives
conservatives <- tibble(
ideology = "Conservative",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 2),  # 1-2 lower probability
rep(0.25, 3),  # 3-5 higher probability (i think the median in the study was around 3-5, so highest probability here)
rep(0.10, 3),  # 6-8 moderate probability
rep(0.05, 8)   # 9-16 lower probability
))
)
# Generate data for liberals
liberals <- tibble(
ideology = "Liberal",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 10), # 1-10 lower probability
rep(0.10, 2),  # 11-12 moderate probability
rep(0.25, 3),  # 13-15 higher probability
rep(0.05, 1)   # 16 lower probability
))
)
# Combine datasets
moral_data <- bind_rows(conservatives, liberals)
# Compute counts for heatmap
moral_counts <- moral_data %>%
count(ideology, moral_allocation)
# Compute cumulative proportions
moral_cumulative <- moral_data %>%
group_by(ideology, moral_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
complete(ideology, moral_allocation, fill = list(count = 0)) %>%
arrange(moral_allocation) %>%
group_by(ideology) %>%
mutate(cumulative_count = cumsum(count),
proportion = cumulative_count / sum(count))
# Calculate cumulative inclusion: Everyone starts at 100%, then it reduces over time (as the original question was phrased as "everything bevorehand is automatically included")
moral_cumulative <- moral_data %>%
arrange(ideology, highest_allocation) %>%
group_by(ideology, highest_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(cumulative_count = rev(cumsum(rev(count)))) %>%  # Reverse cumulative sum (I kept getting the opposite result of what i actually intended, so chatGPT finally helped me solve to reverse the saturation)
group_by(ideology) %>%
mutate(cumulative_prop = cumulative_count / max(cumulative_count))  # Normalize to 1 (100%)
View(moral_cumulative)
# Set seed for reproducibility
set.seed(42)
# Define moral allocation choices
moral_choices <- 1:16
# Generate data for conservatives
conservatives <- tibble(
ideology = "Conservative",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 2),  # 1-2 lower probability
rep(0.25, 3),  # 3-5 higher probability (i think the median in the study was around 3-5, so highest probability here)
rep(0.10, 3),  # 6-8 moderate probability
rep(0.05, 8)   # 9-16 lower probability
))
)
# Generate data for liberals
liberals <- tibble(
ideology = "Liberal",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 10), # 1-10 lower probability
rep(0.10, 2),  # 11-12 moderate probability
rep(0.25, 3),  # 13-15 higher probability
rep(0.05, 1)   # 16 lower probability
))
)
# Combine datasets
moral_data <- bind_rows(conservatives, liberals)
# Compute counts for heatmap
moral_counts <- moral_data %>%
count(ideology, moral_allocation)
# Compute cumulative proportions
moral_cumulative <- moral_data %>%
group_by(ideology, moral_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
complete(ideology, moral_allocation, fill = list(count = 0)) %>%
arrange(moral_allocation) %>%
group_by(ideology) %>%
mutate(cumulative_count = cumsum(count),
proportion = cumulative_count / sum(count))
# Calculate cumulative inclusion: Everyone starts at 100%, then it reduces over time (as the original question was phrased as "everything bevorehand is automatically included")
moral_cumulative <- moral_data %>%
arrange(ideology, moral_allocation) %>%
group_by(ideology, highest_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(cumulative_count = rev(cumsum(rev(count)))) %>%  # Reverse cumulative sum (I kept getting the opposite result of what i actually intended, so chatGPT finally helped me solve to reverse the saturation)
group_by(ideology) %>%
mutate(cumulative_prop = cumulative_count / max(cumulative_count))  # Normalize to 1 (100%)
# Set seed for reproducibility
set.seed(42)
# Define moral allocation choices
moral_choices <- 1:16
# Generate data for conservatives
conservatives <- tibble(
ideology = "Conservative",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 2),  # 1-2 lower probability
rep(0.25, 3),  # 3-5 higher probability (i think the median in the study was around 3-5, so highest probability here)
rep(0.10, 3),  # 6-8 moderate probability
rep(0.05, 8)   # 9-16 lower probability
))
)
# Generate data for liberals
liberals <- tibble(
ideology = "Liberal",
moral_allocation = sample(moral_choices, 500, replace = TRUE, prob = c(
rep(0.05, 10), # 1-10 lower probability
rep(0.10, 2),  # 11-12 moderate probability
rep(0.25, 3),  # 13-15 higher probability
rep(0.05, 1)   # 16 lower probability
))
)
# Combine datasets
moral_data <- bind_rows(conservatives, liberals)
# Compute counts for heatmap
moral_counts <- moral_data %>%
count(ideology, moral_allocation)
# Compute cumulative proportions
moral_cumulative <- moral_data %>%
group_by(ideology, moral_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
complete(ideology, moral_allocation, fill = list(count = 0)) %>%
arrange(moral_allocation) %>%
group_by(ideology) %>%
mutate(cumulative_count = cumsum(count),
proportion = cumulative_count / sum(count))
# Calculate cumulative inclusion: Everyone starts at 100%, then it reduces over time (as the original question was phrased as "everything bevorehand is automatically included")
moral_cumulative <- moral_data %>%
arrange(ideology, moral_allocation) %>%
group_by(ideology, moral_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(cumulative_count = rev(cumsum(rev(count)))) %>%  # Reverse cumulative sum (I kept getting the opposite result of what i actually intended, so chatGPT finally helped me solve to reverse the saturation)
group_by(ideology) %>%
mutate(cumulative_prop = cumulative_count / max(cumulative_count))  # Normalize to 1 (100%)
#plot with fading
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", trans = "sqrt") +  # Smoother fading
labs(title = "Moral Inclusion Heatmap (More Gradual Fading)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
#plot with fading
ggplot(moral_cumulative, aes(x = factor(moral_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue", trans = "sqrt") +  # Smoother fading
labs(title = "Moral Inclusion Heatmap (More Gradual Fading)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
View(moral_counts)
# Set seed for reproducibility
set.seed(42)
n <- 500
moral_data <- tibble(
id = 1:n,
ideology = sample(c("Conservative", "Liberal"), n, replace = TRUE, prob = c(0.5, 0.5)),
highest_allocation = ifelse(
ideology == "Conservative",
sample(1:7, n, replace = TRUE, prob = c(0.1, 0.15, 0.25, 0.3, 0.15, 0.05, 0.02)),
sample(1:15, n, replace = TRUE, prob = c(0.02, 0.03, 0.05, 0.07, 0.08, 0.1, 0.1, 0.08, 0.07, 0.07, 0.08, 0.1, 0.06, 0.05, 0.04))
)
)
# Create cumulative inclusion
moral_cumulative <- moral_data %>%
group_by(ideology, highest_allocation) %>%
summarize(count = n(), .groups = "drop") %>%
complete(ideology, highest_allocation = 1:15, fill = list(count = 0)) %>%
arrange(ideology, highest_allocation) %>%
group_by(ideology) %>%
mutate(cumulative_count = cumsum(count),
percent_included = cumulative_count / max(cumulative_count))
moral_cumulative <- moral_data %>%
arrange(ideology, highest_allocation) %>%
group_by(ideology, highest_allocation) %>%
summarise(count = n(), .groups = "drop") %>%
mutate(cumulative_count = rev(cumsum(rev(count)))) %>%  # Reverse cumulative sum
group_by(ideology) %>%
mutate(cumulative_prop = cumulative_count / max(cumulative_count))  # Normalize to 1 (100%)
# Now plot with properly calculated fading
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Moral Inclusion Heatmap (Fading Over Time)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
# plot with fading
ggplot(moral_cumulative, aes(x = factor(highest_allocation), y = ideology, fill = cumulative_prop)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Moral Inclusion Heatmap (Fading Over Time)",
x = "Moral Inclusion Level",
y = "Ideology",
fill = "Proportion Still Including") +
theme_minimal()
ggplot(long_depression_data, aes(x = BDI_score, y = factor(time), fill = group)) +
geom_density_ridges(alpha = 0.7) +
labs(title = "BDI Score Distributions Across Time", x = "BDI Score", y = "Time") +
theme_minimal()
View(moral_data)
View(liberal_data)
View(conservative_data)
library(ggridges)
ggplot(long_depression_data, aes(x = BDI_score, y = factor(time), fill = group)) +
geom_density_ridges(alpha = 0.7) +
scale_x_reverse() +  # Reverse BDI Score axis
labs(title = "BDI Score Distributions Across Time",
x = "BDI Score (Lower = Better Health)",
y = "Time") +
theme_minimal()
library(ggridges)
ggplot(long_depression_data, aes(x = BDI_score, y = factor(time), fill = group)) +
geom_density_ridges(alpha = 0.7) +
scale_x_reverse() +  # Reverse BDI Score axis
labs(title = "BDI Score Distributions over Sessions",
x = "BDI Score",
y = "Time (in Therapy sessions)") +
theme_minimal()
write_csv(moral_cumulative, "moral_inclusion_data.csv")
write_csv(long_depression, "depression_data.csv")
write_csv(long_depression, "depression_data.csv")
write_csv(long_depression_data, "depression_data.csv")
